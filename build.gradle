import com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer

import java.nio.file.Files
import java.nio.file.StandardCopyOption

plugins {
    id 'java'
    id 'idea'
    id 'application'

    id 'com.github.ben-manes.versions' version '0.21.0'
    id 'com.github.johnrengelman.shadow' version '5.0.0'
    // use local gradle-5.0+ until IntelliJ IDEA decides to updated their hardcoded gradle version, those bastards
}

version '1'

sourceSets {
    spike
}

dependencies {
    compile group: 'com.google.apis', name: 'google-api-services-youtube', version: 'v3-rev20190128-1.28.0'

    compile group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.14.0'

    compile group: 'com.google.guava', name: 'guava', version: '27.1-jre'

    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.3'
    compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
    compile group: 'org.apache.commons', name: 'commons-text', version: '1.6'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'

    compile group: 'one.util', name: 'streamex', version: '0.6.8'

    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.2'

    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.4.1'

    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.25.1'

    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.12.2'
    testCompile group: 'org.assertj', name: 'assertj-guava', version: '3.2.1'

    spikeCompile sourceSets.main.output
}

configurations {
    spikeCompile {
        extendsFrom compile
    }
}

mainClassName = 'eu.goodlike.Main'
project.buildDir = '.build'
def projectPath = project.rootDir.toPath()
def jarPath = projectPath.resolve('artifacts')

shadowJar {
    transform(Log4j2PluginsCacheFileTransformer.class)
    mergeServiceFiles()

    baseName = rootProject.name
    classifier = null
    version = project.version

    destinationDir = jarPath.toFile()
    includeEmptyDirs = false
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['config-credentials', 'config-public']
        }
    }
    spike {
        java {
            srcDirs = ['spike']
        }
        resources {
            srcDirs = ['config-public']
        }
    }
    test {
        java {
            srcDirs = ['test']
        }
        resources {
            srcDirs = ['test', 'test-http']
            excludes = ["**/*.java"]
        }
    }
}

idea {
    module {
        excludeDirs += file('.build')
        excludeDirs += file('.gradle')
        excludeDirs += file('.idea')
        excludeDirs += file('.logs')
        excludeDirs += file('.wrapper')

        excludeDirs += file('artifacts')

        inheritOutputDirs = true

        iml {
            generateTo = file('.idea')
        }
    }

    project {
        outputFile = new File('.idea', outputFile.getName())
    }
}

tasks.idea {
    doLast {
        def iwsFile = projectPath.resolve(rootProject.name + '.iws')
        if (Files.exists(iwsFile)) {
            Files.move(iwsFile, iwsFile.getParent().resolve('.idea').resolve(iwsFile.getFileName()),
                    StandardCopyOption.REPLACE_EXISTING)
        }
    }
}

test {
    useJUnitPlatform()
}

dependencyUpdates {
    outputDir = '/.build/dependencyUpdates'
}

repositories {
    jcenter()
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion = '5.3'
    jarFile = projectPath.resolve('.wrapper').resolve('gradle-wrapper.jar').toFile()
}

group 'eu.goodlike'

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
    options.encoding = 'UTF-8'
}
